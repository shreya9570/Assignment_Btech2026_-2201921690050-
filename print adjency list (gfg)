#include <iostream>
#include <vector>
#include <utility>  // For pair

using namespace std;

// Function to generate the adjacency list
vector<vector<int>> printGraph(int V, vector<pair<int, int>>& edges) {
    // Create a vector of vectors for the adjacency list representation
    vector<vector<int>> adj(V);
    
    // Loop through the edges to fill the adjacency list
    for (auto& edge : edges) {
        int u = edge.first;
        int v = edge.second;
        
        // Since it's an undirected graph, add the edge in both directions
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // Return the adjacency list
    return adj;
}

// Function to print the adjacency list
void printAdjacencyList(const vector<vector<int>>& adj) {
    for (int i = 0; i < adj.size(); ++i) {
        cout << i << ": ";
        for (int neighbor : adj[i]) {
            cout << neighbor << " ";
        }
        cout << endl;
    }
}

int main() {
    // Example graph with 5 vertices and 5 edges
    int V = 5;  // Number of vertices
    vector<pair<int, int>> edges = {
        {0, 1},  // Edge between vertex 0 and vertex 1
        {0, 4},  // Edge between vertex 0 and vertex 4
        {1, 2},  // Edge between vertex 1 and vertex 2
        {1, 3},  // Edge between vertex 1 and vertex 3
        {3, 4}   // Edge between vertex 3 and vertex 4
    };
    
    // Generate the adjacency list
    vector<vector<int>> adjList = printGraph(V, edges);

    // Print the adjacency list
    cout << "Adjacency List of the Graph:" << endl;
    printAdjacencyList(adjList);

    return 0;
}
