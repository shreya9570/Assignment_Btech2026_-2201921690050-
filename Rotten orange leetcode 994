#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<pair<int, int>, int>> q;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        int countfresh = 0;
// Initialize queue with rotten oranges and count fresh ones
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.push({{i, j}, 0});  // Fixed push syntax
                    vis[i][j] = 2; // Mark as visited (rotten)
                }
                if (grid[i][j] == 1) {
                    countfresh++;
                }
            }
        }
       int tm = 0;
        int cnt = 0; // Count of fresh oranges turned rotten
        int delrow[] = {-1, 0, +1, 0};
        int delcol[] = {0, 1, 0, -1};

        while (!q.empty()) {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop(); // Fixed: pop after accessing front
tm = max(tm, t); // Update time to maximum rotting time
for (int i = 0; i < 4; i++) {
                int nrow = r + delrow[i];
                int ncol = c + delcol[i];
 if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                    vis[nrow][ncol] == 0 && grid[nrow][ncol] == 1) { // Fixed condition
                    q.push({{nrow, ncol}, t + 1});
                    vis[nrow][ncol] = 2; // Mark as rotten
                    cnt++;
                }
            }
        }
if (cnt != countfresh) {
            return -1; // If not all fresh oranges were rotted
        }

        return tm; // Return total time taken
    }
};
