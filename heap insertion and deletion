#include <iostream>
using namespace std;
class Heap {
public:
    int *arr;
    int size;
    int capacity;
    Heap(int capacity) {
        this->capacity = capacity;
        this->arr = new int[capacity + 1];  // +1 for 1-based index
        this->size = 0;
    }
void insert(int val) {
        if (size == capacity) {
            cout << "Heap Overflow" << endl;
            return; }
size++;
        int index = size;
        arr[index] = val;
// Heapify Up (Max Heap)
        while (index > 1) {
            int parentIndex = index / 2;
            if (arr[index] > arr[parentIndex]) {
                swap(arr[index], arr[parentIndex]);
                index = parentIndex;
            } else {
                break;
            } } }
    void print() {
        for (int i = 1; i <= size; i++) {
            cout << arr[i] << " "; }
        cout << endl; } 
int deleter(){
    int answer = arr[1];
    //replacement
    arr[1] = arr[size];
    //last element ko delete kr uski original position pe 
    size--;
    int index = 1 ;
    while( index< size){
        int leftindex = 2*index ;
        int rightindex = 2*index +1 ;
        int largestindex =  index ;
        if( leftindex <= size && arr[largestindex] < arr[leftindex]){
            largestindex = leftindex ;
        }
        if( rightindex <= size && arr[largestindex] < arr[rightindex]){
            largestindex = rightindex ;
        }
  // no change 
    if( index == largestindex){
     break;
    }
         else {
             swap( arr[index] , arr[largestindex]);
             index = largestindex ;
         }                                           
        }
    return answer;
    }
    
};
int main() {
    Heap h(20);
 // Inserting values
    h.insert(10);
    h.insert(20);
    h.insert(5);
    h.insert(11);
    h.insert(6);
 cout << "Printing the content of the heap: " << endl;
    h.print();
    int ans = h.deleter();
    cout<< "answer"<<ans <<endl;
return 0;
}
